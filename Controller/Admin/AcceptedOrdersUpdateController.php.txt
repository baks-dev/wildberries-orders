<?php
/*
 *  Copyright Baks.dev <admin@baks.dev>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 */

namespace BaksDev\Wildberries\Orders\Controller\Admin;

//use App\Module\Orders\Order\UseCase\OrderAggregate;
//use App\Module\Products\Product\Repository\ProductByOffer\ProductByOfferInterface;
//use App\Module\User\Profile\UserProfile\Type\Id\UserProfileUid;
//use App\Module\Wildberries\Products\Product\Entity\WbProductCardVariation;
//use App\Module\Wildberries\Rest\Api\Orders\Orders\WbOrders;
//use App\Module\Wildberries\Rest\Auth\WbTokenAuth;
//use App\Module\Wildberries\Settings\Repository\AllShopSettingsToken\AllShopSettingsTokenInterface;
//use App\System\Controller\AbstractController;
//use App\System\Repository\SettingsMain\GetSettingsMain\GetSettingsMainInterface;
use BaksDev\Wildberries\Orders\Entity\Event\WbOrdersEvent;
use BaksDev\Wildberries\Orders\Repository\WbOrdersById\WbOrdersByIdInterface;
use BaksDev\Wildberries\Orders\Type\Email\ClientEmail;
use BaksDev\Wildberries\Orders\Type\Status\WbOrderStatusEnum;
use BaksDev\Wildberries\Orders\UseCase\Command\NewEdit\Order\ProductOrderDTO;
use BaksDev\Wildberries\Orders\UseCase\Command\NewEdit\Wildberries\WbOrderDTO;
use BaksDev\Wildberries\Orders\UseCase\WbOrdersAggregate;
use DateTimeImmutable;
use Doctrine\ORM\EntityManagerInterface;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Security;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;

//#[IsGranted(new Expression('"ROLE_ADMIN" in role_names'))]
#[Security("is_granted('ROLE_ADMIN')")]
final class AcceptedOrdersUpdateController extends AbstractController
{
    
    
    #[Route('/admin/wb/accepted/orders/update', name: 'accepted.orders.orders', methods: [
      'GET',
      'POST'
    ])]
    public function index(
      Request $request,
      AllShopSettingsTokenInterface $settingsTokens,
      EntityManagerInterface $entityManager,
      ProductByOfferInterface $productByOffer,
      OrderAggregate $orderAggregate,
      WbOrdersAggregate $wbOrdersAggregate,
      WbOrdersByIdInterface $wbOrdersById,
    ) : Response
    {
        
        dd('/admin/wb/accepted/orders/update');
        
        /**
         * Делаем перебор всех токенов профилей
         * @var UserProfileUid $token
         */
        foreach($settingsTokens->get() as $token)
        {
            $httpClient = new WbTokenAuth($token);
            $wb = new WbOrders($httpClient);
            
            $offset = 0;
            while(true)
            {
    
                $orders = $wb->get($offset, WbOrderStatusEnum::ACCEPTED);
    
                if($orders === false || !isset($orders['orders']) || empty($orders['orders']))
                {
                    break;
                }
                
                foreach($orders['orders'] as $order)
                {
                    
                    /* Проверяем, имеется ли заказ WB */
                    /** @var WbOrdersEvent $WbOrder */
                    $WbOrder = $wbOrdersById->get($order['orderId']);
                    // $entityManager->getRepository(\BaksDev\Wildberries\Orders\Entity\WbOrders::class)
                    // ->findOneBy(['orders' => $order['orderId']]);
                    
//                    if(!empty($WbOrder))
//                    {
//                        $WbOrderDTO = new WbOrderDTO($token, $order['orderId']);
//                        $WbOrder->getDto($WbOrderDTO);
//
//                        if($WbOrderDTO->getStatus() != $order['status'])
//                        {
//                            $WbOrderDTO->update();
//                            $WbOrderDTO->setStatus($order['status']);
//                        }
//
//                        $WbOrderClientDTO = $WbOrderDTO->getClient();
//
//                        if($WbOrderClientDTO->getStatus() != $order['userStatus'])
//                        {
//                            $WbOrderDTO->update();
//                            $WbOrderClientDTO->setStatus($order['userStatus']);
//                        }
//
//                        /* Добавляем событие  */
//                        if($WbOrderDTO->isUpdate())
//                        {
//                            $WbOrderEntity = $wbOrdersAggregate->handle($WbOrderDTO);
//                        }
//
//                        continue;
//                    }
                    
                    /* Получаем карточку по штрихкоду */
                    $card = $entityManager->getRepository(WbProductCardVariation::class)->find($order['barcode']);
    
                    if(empty($card))
                    {
                        //$io->error(sprintf('Отсутствует карточка товара Wildberries barcode: %s', $order['barcode']));
                        continue;
                    }
                    
                    
                    
                    
                    /* Получаем продукт по ТП */
                    $offer = $card->getOffer();
                    $product = $productByOffer->get($offer);
    
    
                    if(!$product)
                    {
                        /* TODO: добавить уведомление администраторам */
                        dump($card);
                        dd('Продукт не найден');
                    }
                    
                    /* Создаем системный заказ */
                    $ProductOrderDTO = new ProductOrderDTO($token, $product, $offer);
                    $ProductPriceDTO = $ProductOrderDTO->getPrice();
                    $ProductPriceDTO->setPrice(($order['convertedPrice'] / 100));
                    $ProductPriceDTO->setTotal(1); /* Всегда количество 1 */
    
                    
                    
                    
                    /* Сохраняем */
                    $OrderEntity = $orderAggregate->handle($ProductOrderDTO);
                    
                    
                    
                    
                    
                    /* Создаем Wildberries заказ */
                    $WbOrderDTO = new WbOrderDTO($token, $order['orderId']);
                    $WbOrderDTO->setOrders($OrderEntity);
                    $WbOrderDTO->setBarcode($order['barcode']);
                    $WbOrderDTO->setCreated(new DateTimeImmutable($order['dateCreated']));
                    $WbOrderDTO->setStatus($order['status']);
                    
                    $WbOrderClientDTO = $WbOrderDTO->getClient();
                    $WbOrderClientDTO->setUsername($order['userInfo']['fio']);
                    $WbOrderClientDTO->setPhone($order['userInfo']['phone']);
                    $WbOrderClientDTO->setEmail(new ClientEmail($order['userInfo']['email']));
                    $WbOrderClientDTO->setAddress($order['deliveryAddress']);
                    $WbOrderClientDTO->setStatus($order['userStatus']);
    
                    /* Сохраняем */
                    $WbOrderEntity = $wbOrdersAggregate->handle($WbOrderDTO);
                    
                    //dump($WbOrderEntity);
                    
                    //$ProductPriceDTO->setCurrency(CurrencyEnum::CurrencyCode($order['currencyCode']));
                    
                    //dump($product);
                    //dump($card);
                    //dd($order);
                }
                
                //dd('orders');
                
                $offset += WbOrders::LIMIT;
                //continue;
            }
            
        }
        
        return new Response('OK');
    }
    
}